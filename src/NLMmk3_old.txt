#include "plugin.hpp"


struct NLMmk3 : Module {
	enum ParamId {
		PARAMS_LEN
	};
	enum InputId {
		INPUTS_LEN
	};
	enum OutputId {
		OUTPUTS_LEN
	};
	enum LightId {
		LIGHTS_LEN
	};

	NLMmk3() {
		config(PARAMS_LEN, INPUTS_LEN, OUTPUTS_LEN, LIGHTS_LEN);
	}

	void process(const ProcessArgs& args) override {
	}
};


const std::vector<float> COLOR_TO_RGB_MAPPING = {
	0., 0., 0.,
	1., 0., 0.,
	0., 1., 0.,
	0., 0., 1.,
};


struct NLMmk3DrawState {
	uint8_t colors[9][9] = {};
};

void randomizeDrawState(NLMmk3DrawState& state) {
	for (int x = 0; x < 9; x++) {
		for (int y = 0; y < 9; y++) {
			state.colors[x][y] = rack::random::u32 () % 4;
		}
	}
}

struct NLMmk3DrawWidget : Widget {

	NLMmk3DrawState* state;

	void initialize(NLMmk3DrawState* state) {
		this->state = state;
	}

	void draw(const DrawArgs& args) override {
		// Draw a yellow rectangle with the size of this widget
		nvgFillColor(args.vg, nvgRGBf(0.1, 0.1, 0.1));
		nvgBeginPath(args.vg);
		nvgRect(args.vg, 0.0, 0.0, box.size.x, box.size.y);
		nvgFill(args.vg);

		// // Draw a triangle with blue stroke
		// nvgStrokeColor(args.vg, nvgRGBf(1.0, 0.0, 0.0));
		// nvgStrokeWidth(args.vg, 5.0);
		// nvgLineJoin(args.vg, NVG_MITER);
		// nvgBeginPath(args.vg);
		// nvgMoveTo(args.vg, 10.0, 90.0);
		// nvgLineTo(args.vg, 90.0, 90.0);
		// nvgLineTo(args.vg, 50.0, 10.0);
		// nvgClosePath(args.vg);
		// nvgStroke(args.vg);

		//Draw all parts
		const float OFFSET_X = 0.01 * box.size.x;
		const float OFFSET_Y = 0.01 * box.size.y;

		const int BUTTONS_COUNT_X = 9;
		const int BUTTONS_COUNT_Y = 9;

		const float DRAW_AREA_X = box.size.x - 2 * OFFSET_X;
		const float DRAW_AREA_Y = box.size.y - 2 * OFFSET_Y;

		const float BUTTON_SIZE_X = DRAW_AREA_X / BUTTONS_COUNT_X;
		const float BUTTON_SIZE_Y = DRAW_AREA_Y / BUTTONS_COUNT_Y;

		for (int x = 0; x < BUTTONS_COUNT_X; x++) {
			for (int y = 0; y < BUTTONS_COUNT_Y; y++) {
				const float colorR = COLOR_TO_RGB_MAPPING[state->colors[x][y] * 3 + 0];
				const float colorG = COLOR_TO_RGB_MAPPING[state->colors[x][y] * 3 + 1];
				const float colorB = COLOR_TO_RGB_MAPPING[state->colors[x][y] * 3 + 2];
				nvgFillColor(args.vg, nvgRGBf(colorR, colorG, colorB));
				nvgBeginPath(args.vg);
				nvgRect(args.vg, OFFS-------------------------ET_X + x * BUTTON_SIZE_X, OFFSET_Y + y * BUTTON_SIZE_Y, BUTTON_SIZE_X, BUTTON_SIZE_Y);
				nvgFill(args.vg);
			}
		}

		// // Draw a blue circle
		// nvgFillColor(args.vg, nvgRGBf(0.0, 0.0, 1.0));
		// nvgBeginPath(args.vg);
		// nvgCircle(args.vg, 70.0, 50.0, 20.0);
		// nvgFill(args.vg);
	}
};


struct NLMmk3Widget : ModuleWidget {
	NLMmk3DrawWidget* drawWidget;
	NLMmk3DrawState drawState;

	NLMmk3Widget(NLMmk3* module) {
		setModule(module);
		setPanel(createPanel(asset::plugin(pluginInstance, "res/NLMmk3.svg")));

		addChild(createWidget<ScrewSilver>(Vec(RACK_GRID_WIDTH, 0)));
		addChild(createWidget<ScrewSilver>(Vec(box.size.x - 2 * RACK_GRID_WIDTH, 0)));
		addChild(createWidget<ScrewSilver>(Vec(RACK_GRID_WIDTH, RACK_GRID_HEIGHT - RACK_GRID_WIDTH)));
		addChild(createWidget<ScrewSilver>(Vec(box.size.x - 2 * RACK_GRID_WIDTH, RACK_GRID_HEIGHT - RACK_GRID_WIDTH)));

		drawState = {};
		randomizeDrawState(drawState);
		// mm2px(Vec(108.933, 108.933))
		drawWidget = createWidget<NLMmk3DrawWidget>(mm2px(Vec(2.894, 14.056)));
		addChild(drawWidget);
	}
};


Model* modelNLMmk3 = createModel<NLMmk3, NLMmk3Widget>("NLMmk3");