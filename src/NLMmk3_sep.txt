#include "NLMmk3.hpp"

#include "nl/driver.hpp"
#include "expansion.hpp"

#include <iostream>
#include <regex>

const std::regex IN_MIDI_NAME_REGEX("^MIDIIN2 \\(LPMiniMK3 MIDI\\).*$");
const std::regex OUT_MIDI_NAME_REGEX("^LPMiniMK3 MIDI.*$");

	NLMmk3::NLMmk3()
	{
		config(PARAMS_LEN, INPUTS_LEN, OUTPUTS_LEN, LIGHTS_LEN);
		configParam(TEMPO_PARAM, 30.f, 300.f, 60.f, "Tempo", " BPM");
		// configParam(QUANT_PARAM, 0.f, 16.f, 1.0f, "Qunatization", " x", 0.5f);
		configSwitch(QUANT_PARAM, 0.5f, 8.f, 1.f, "Quantization", {"0.5x", "1x", "1.5x", "2x", "2.5x", "3x", "3.5x", "4x", "4.5x", "5x", "5.5x", "6x", "6.5x", "7x", "7.5x", "8x"});
		configInput(IN_INPUT, "Input Clock");
		configOutput(OUT_OUTPUT, "Output Clock");

		configBypass(IN_INPUT, OUT_OUTPUT);
		//messageSystem = MessageSystem(ExpansionType::DRUM_SEQUENCER, this);
	}

	/* #region Initialization */

	bool NLMmk3::areDriversInitialized()
	{
		return input.getDeviceId() >= 0 && output.getDeviceId() >= 0;
	}

	void NLMmk3::initialize()
	{
		INFO("Initializing NLMmk3 module:");
		input = midi::Input();
		INFO("\tInput devices:");

		int selectedInputDeviceId = -1;
		for (int &i : input.getDeviceIds())
		{
			std::string name = input.getDeviceName(i);
			INFO("\t  %d: %s", i, name.c_str());
			if (std::regex_match(name, IN_MIDI_NAME_REGEX))
			{
				selectedInputDeviceId = i;
			}
		}

		output = midi::Output();

		int selectedOutputDeviceId = -1;
		INFO("\tOutput devices:");
		for (int &i : output.getDeviceIds())
		{
			std::string name = output.getDeviceName(i);
			INFO("\t  %d: %s", i, name.c_str());
			if (std::regex_match(name, OUT_MIDI_NAME_REGEX))
			{
				selectedOutputDeviceId = i;
			}
		}

		if (selectedInputDeviceId >= 0)
		{
			input.setDeviceId(selectedInputDeviceId);
			INFO("\tSelected input device: %s", input.getDeviceName(selectedInputDeviceId).c_str());
		}

		if (selectedOutputDeviceId >= 0)
		{
			output.setDeviceId(selectedOutputDeviceId);
			INFO("\tSelected output device: %s", output.getDeviceName(selectedOutputDeviceId).c_str());
		}

		if (areDriversInitialized())
		{
			driver = nl::Driver(&input, &output);
			driver.initProgrammerMode();

			const nl::Color colorTable = nl::Color::table(5);
			const nl::Color colorFlash = nl::Color::flash(5, 0);
			const nl::Color colorPulse = nl::Color::pulse(64, 32);
			const nl::Color colorRGB = nl::Color::RGB(127, 0, 127);

			driver.renderer.setColor(colorTable, 1, 1);
			driver.renderer.setColor(colorFlash, 2, 2);
			driver.renderer.setColor(colorPulse, 3, 3);
			driver.renderer.setColor(colorRGB, 4, 4);

			driver.renderer.flush();
			lights[LIGHT_LIGHT].setBrightness(1.f);
		}
	}

	/* #endregion */

	/* #region  */
	void NLMmk3::onExpanderConfigurationChange() {
		INFO("Expander configuration change");
	}
	
	/* #endregion */

	void NLMmk3::process(const ProcessArgs &args) {
	
		if (!initialized)
		{
			initialize();
			initialized = true;
		}
};

struct NLMmk3Widget : ModuleWidget
{
	NLMmk3Widget(NLMmk3 *module)
	{
		setModule(module);
		setPanel(createPanel(asset::plugin(pluginInstance, "res/NLMmk3.svg")));

		addChild(createWidget<ScrewSilver>(Vec(RACK_GRID_WIDTH, 0)));
		addChild(createWidget<ScrewSilver>(Vec(box.size.x - 2 * RACK_GRID_WIDTH, 0)));
		addChild(createWidget<ScrewSilver>(Vec(RACK_GRID_WIDTH, RACK_GRID_HEIGHT - RACK_GRID_WIDTH)));
		addChild(createWidget<ScrewSilver>(Vec(box.size.x - 2 * RACK_GRID_WIDTH, RACK_GRID_HEIGHT - RACK_GRID_WIDTH)));

		addParam(createParamCentered<RoundBlackKnob>(mm2px(Vec(6.666, 37.036)), module, NLMmk3::TEMPO_PARAM));
		addParam(createParamCentered<RoundBlackKnob>(mm2px(Vec(19.501, 37.148)), module, NLMmk3::QUANT_PARAM));

		addInput(createInputCentered<PJ301MPort>(mm2px(Vec(6.388, 25.007)), module, NLMmk3::IN_INPUT));

		addOutput(createOutputCentered<PJ301MPort>(mm2px(Vec(19.432, 25.106)), module, NLMmk3::OUT_OUTPUT));

		addChild(createLightCentered<MediumLight<RedLight>>(mm2px(Vec(12.566, 22.802)), module, NLMmk3::LIGHT_LIGHT));
	}
};

Model *modelNLMmk3 = createModel<NLMmk3, NLMmk3Widget>("NLMmk3");